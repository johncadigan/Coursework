package calculator


sealed abstract class Expr
final case class Literal(v: Double) extends Expr
final case class Ref(name: String) extends Expr
final case class Plus(a: Expr, b: Expr) extends Expr
final case class Minus(a: Expr, b: Expr) extends Expr
final case class Times(a: Expr, b: Expr) extends Expr
final case class Divide(a: Expr, b: Expr) extends Expr




object Calculator {
  
  val NumReg = "[0-9]+"
  val VarReg = "[a-j]"
  val ValReg = NumReg+"|"+VarReg
  val PlusReg = ValReg + "\\+" + ValReg
  val MinusReg =   ValReg + "\\-" + ValReg
  val TimesReg =   ValReg + "\\*" + ValReg
  val DivideReg =   ValReg + "\\*" + ValReg
    
  def computeValues(
      namedExpressions: Map[String, Signal[Expr]]): Map[String, Signal[Double]] = {
    
      namedExpressions.transform((k,v)=>Signal(eval(namedExpressions(k)(), namedExpressions))).withDefaultValue(Signal(Double.NaN))
  }

  def eval(expr: Expr, references: Map[String, Signal[Expr]]): Double = {
   expr match{
      case Literal(v) => v
      case Ref(name) => {
        if(Calculator.accumulateRefs(expr, references, List(name))==true)
           eval(references(name)(), references)
        else if(Calculator.accumulateRefs(expr, references, List(name))==false)
          Double.NaN
      }
      case Plus(a,b) =>  eval(a, references) + eval(b, references)
      case Minus(a,b) =>  eval(a, references) - eval(b, references)
      case Times(a,b) =>  eval(a, references) * eval(b, references) 
      case Divide(a,b) =>  eval(a, references) / eval(b, references)
      
   
     }
      
  }
  def accumulateRefs(expr: Expr, references: Map[String, Signal[Expr]], acc: List[String]): Boolean ={
      
      expr match {
        case Literal(v) => true
        case Ref(name) => {
           if(acc.count(x=>x==name)==0){
             accumulateRefs(references(name)(), references, acc:+name)
           }
           else false
        }
        case Plus(a,b)=>  accumulateRefs(a, references, acc) & accumulateRefs(b, references, acc)
        case Minus(a,b)=>  accumulateRefs(a, references, acc) & accumulateRefs(b, references, acc)
        case Times(a,b)=>  accumulateRefs(a, references, acc) & accumulateRefs(b, references, acc)
        case Divide(a,b)=> accumulateRefs(a, references, acc) & accumulateRefs(b, references, acc)
      }
  }

  /** Get the Expr for a referenced variables.
   *  If the variable is not known, returns a literal NaN.
   */
  private def getReferenceExpr(name: String,
      references: Map[String, Signal[Expr]]) = {
    references.get(name).fold[Expr] {
      Literal(Double.NaN)
    } { exprSignal =>
      exprSignal()
    }
  }
}
