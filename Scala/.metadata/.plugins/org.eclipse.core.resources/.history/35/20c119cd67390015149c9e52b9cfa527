package quickcheck

import common._

import org.scalacheck._
import Arbitrary._
import Gen._
import Prop._
import scala.math.min

abstract class QuickCheckHeap extends Properties("Heap") with IntHeap {

  property("min1") = forAll { a: Int =>
    val h = insert(a, empty)
    findMin(h) == a
  }
  
  property("minOf2") = forAll { a: Int =>
    if(a < 2147483647){
    val h = insert(a, empty)
    val h2 = insert(a+1, h)
    findMin(h2) == a
    }
    else true
    
  }
  
  property("minOfNone") = forAll { a: Int =>
    
    val h = insert(a, empty)
    val eh = deleteMin(h)
    isEmpty(eh)
    
  }
  
  property("minOfList") = forAll {a: List[Int] =>
    
    true
  }
   
 
  
  property("gen1") = forAll { (h: H) =>
  val m = if (isEmpty(h)) 0 else findMin(h)
  findMin(insert(m, h))==m
  }
  property("gen2") = forAll { (h: H, h2: H)=>
    val m1 = if(isEmpty(h)) 0 else findMin(h)  
    val m2 = if(isEmpty(h2)) 0 else findMin(h2)
    val mm = meld(h,h2)
    findMin(mm) == min(m1,m2)
  }
  
  
   def HeapAcc(xs: List[Int], pos: Int, acc: H): H = {
      if(pos == 0) insert(xs(0),acc)
      else insert(xs(pos), HeapAcc(xs, pos-1, acc))
    }
   def HeapList(n: Int, h: H, L: List[Int]): Boolean = {
     if(n==0) findMin(h) == L(0)
     else if(findMin(h) != L(n)) false 
     else HeapList(n-1,deleteMin(h), L.init)
   }
  
  lazy val genHeap: Gen[H] = for {
    a <- arbitrary[Int]
    m <- oneOf(const(empty), genHeap)
  } yield insert(a, m)

  implicit lazy val arbHeap: Arbitrary[H] = Arbitrary(genHeap)

}
